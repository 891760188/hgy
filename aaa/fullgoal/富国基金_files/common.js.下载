/**
 * @fileOverview 业务类公共函数
 *
 * @author xing.wei 2015/12/21
 */

function initForm() {
    var data = JSON.parse(getLocVal("zcmxChoose"));
    //我的基金列表里查看
    if (data) {
        // if (data.valueType != "1") {//资金方式非直销则隐藏操作按钮
        // $("#BTN").addClass(" uhide");
        // }

        $('#fundName').html(getDefault(data.fundName));
        $('#pernetValue').html(toFloat(getDefault(data.pernetValue), 4));
        $('#fundValue').html(toFloat(getDefault(data.fundValue), 2));
        $('#currentRemainShare').html(toFloat(getDefault(data.currentRemainShare), 2));
        //当前份额余额(持有份额)
        $('#remainShare').html(toFloat(getDefault(data.remainShare), 2));
        //可用份额

        // 收益文字：非富钱包货币基金为“未付收益”，其余为“累计收益”
        if (data.fundCode != '000638' && data.fundType == "04") {
            //alert(data.fundCode+"====="+data.fundType);
            $("#sywz").html("未付收益（元）");
        }

        $('#incomeAccumulate').html(getDefault(data.incomeAccumulate));
        //累计收益
        getAllBankCard(data, defaultCheck);
    } else {
        commonHint("", "暂无基金明细");
    }
}

//日期格式化
function getYYYY_MM_DD(t) {
    if (!t)
        t = (new Date()).getTime();
    var d = new Date(t);
    var y = d.getFullYear();
    var m = d.getMonth() * 1 + 1;
    m = m < 10 ? ('0' + m) : m;
    var day = d.getDate();
    day = day < 10 ? ('0' + day) : day;
    return y + '-' + m + '-' + day;
}

//日期格式化
function getYYYYMMDD(t) {
    if (!t)
        t = (new Date()).getTime();
    var d = new Date(t);
    var y = d.getFullYear();
    var m = d.getMonth() * 1 + 1;
    m = m < 10 ? ('0' + m) : m;
    var day = d.getDate();
    day = day < 10 ? ('0' + day) : day;
    return "" + y + m + day;
}

//初始化获取前一个月日期
function latelyOneMonthDate() {
    var result = new Date();
    result.setMonth(result.getMonth()-1);
    result = getYYYYMMDD(result);
    return result;
}
//初始化获取前三个月日期
function latelyThreeMonthDate() {
    var result = new Date();
    result.setMonth(result.getMonth()-3);
    result = getYYYYMMDD(result);
    return result;
}
//初始化获取前一年日期
function latelyOneYearDate() {
    var result = new Date();
    result.setMonth(result.getMonth()-12);
    result = getYYYYMMDD(result);
    return result;
}

//日期格式化
function getMM_DDByDate(t) {
    if (!t)
        t = (new Date()).getTime();
    var d = new Date(t);
    var y = d.getFullYear();
    var m = d.getMonth() * 1 + 1;
    m = m < 10 ? ('0' + m) : m;
    var day = d.getDate();
    day = day < 10 ? ('0' + day) : day;
    return m + '-' + day;
}

/*
 * 判断对象是否定义
 * @param value 要判断的对象
 */
function isDefine(value) {
    if (value == null || value == "" || value == "undefined" || value == undefined || value == "null" || value == "(null)" || value == 'NULL' || typeof (value) == 'undefined') {
        return false;
    } else {
        value = value + "";
        value = value.replace(/\s/g, "");
        if (value == "") {
            return false;
        }
        return true;
    }
}

/*
 * 设置缓存
 * @param key:要保存的键，key如果是数组，就会把数组中每个键值对都保存起来，如果是对象则会把对象里面每个  键值对都保存起来
 * @param val:要保存对应的值
 */
function setLocVal(key, value) {
    appcan.locStorage.setVal(key, value);
}

/*
 * 获取key保存在localStorage中对应的值
 * @param key:要获取值的键值
 */

function getLocVal(key) {
    if (appcan.locStorage.getVal(key)) {
        return appcan.locStorage.getVal(key);
    }
}

/*
 * 清除localStorage中对应的值
 * @param key:要清除值的健名
 * 注意：如果为空会清空整个存储
 */
function clearLocVal(key) {
    if (key)
        appcan.locStorage.remove(key);
    else
        appcan.locStorage.remove();
}

/*
 * 统一提示方法
 * @param type 提示类型：alert或toast(有时间限制)
 * @param msg 提示信息
 */
function commonHint(type, msg) {
    if (type == "alert") {
        uexWindow.alert("温馨提示", msg, "确定");
    } else {
        appcan.window.openToast(msg, 2000, 5, 0);
    }
}

/*
 * alert方式的提示方法
 * @param msg 提示信息
 */
function showHint(msg) {
    commonHint('alert', msg);
}

/*
 * 加载时的提示方法（不限时）
 * @param msg 提示信息
 */
function loadingHint(msg, cbDisableBtn) {
    //appcan.window.openToast(msg, "", 5, 0);
    fqbToast();
    if (cbDisableBtn) {
        cbDisableBtn();
    }
}

/*
 * 加载时的提示方法（不限时）
 * @param msg 提示信息
 */
function loadingHintChackUp(msg, cbDisableBtn) {
    appcan.window.openToast(msg, "", 5, 0);
    if (cbDisableBtn) {
        cbDisableBtn();
    }
}

/*
 * 统一打开新页面方法
 * @param winName 被打开的新页面在应用中的名称
 * @param html 被打开的页面名称或完整路径
 * @param animID 动画效果
 */
function openNewWindow(winName, html, animID) {
	var htmlList=html.split("?");
	var paramtStr="";
	//添加微信访问
	paramtStr=appendUrlParam(paramtStr,weixinUrlInfo);
	//添加url正常访问
	if(htmlList.length>1){
	    for(var i=1;i<htmlList.length;i++){
	        paramtStr=appendUrlParam(paramtStr,htmlList[i]);
	    }
	}
	//添加合作平台访问标识
	if(isDefine(coopChannelOpenParamt)){
	    paramtStr=appendUrlParam(paramtStr,"coopChannelOpen="+coopChannelOpenParamt);
	}
	
	//用于登录检查无痕浏览
	if(isDefine(NOTRACKFLAG)){
	    paramtStr=appendUrlParam(paramtStr,"trackFlag=true")
	}
	//添加微信绑定关系
	html=htmlList[0]+paramtStr;
    var extraInfo = JSON.stringify({
        extraInfo : {
            opaque : false,
            bgColor : '#ffffff'
        }
    });
    if (animID) {
        uexWindow.open(winName, 0, html, animID, "", "", 0, 260, extraInfo);
    } else {
        uexWindow.open(winName, 0, html, 10, "", "", 0, 260, extraInfo);
    }
}

//拼接url后的参数
function appendUrlParam(paramtStr,addParamt){
    if(!isDefine(addParamt)){
        return paramtStr;
    }
    
    if(paramtStr.indexOf(addParamt)!=-1){
        return paramtStr;
    }
    if(isDefine(paramtStr)){
        paramtStr+="&"+addParamt;
    }else{
        if(addParamt.substr(0,1)=="?"){
            paramtStr+=addParamt;
        }else{
            paramtStr+="?"+addParamt;
        }
    }
    return paramtStr;
}

/*
 * 统一关闭页面方法
 */
function closeWindow() {
    uexWindow.close(-1);
}

/*
 *用于改变输入框值在取得焦点时的位置@fn changeIptCss
 *用于改变输入框值在失去焦点时的位置@fn reIptCss
 */
function changeIptCss(obj) {
    obj.className = obj.className.replace(/tx-r/, "tx-l");
    setLocVal("shumu", obj.value);
    obj.value = "";
    //moveEnd(obj);
}

function reIptCss(obj) {
    if (obj.value == "") {
        obj.value = isDefine(getLocVal("shumu")) ? getLocVal("shumu") : 0;
        clearLocVal("shumu");
    }
    obj.className = obj.className.replace(/tx-l/, "tx-r");
}

/*
 * 检查网络
 */
function validateNetwork() {
    return window.navigator.onLine == true;
}

//清除本地缓存
function clearLocalData() {
    appcan.locStorage.remove();
}

/**
 * @description 获取数据标签的颜色
 * @method getColor
 * @param val 涨跌幅的值（有正负）
 * @returns void
 * @author ZhaoJia 2015-10-09 16:28:44
 */
//设置红涨绿跌属性颜色，返回自定价class类，徐添加到class类里
function getColor(dataValue) {
    var dataValue = new Number(dataValue);
    if (dataValue >= 0) {
        return "c-e45";
    } else {
        return "txt_gree";
    }
}

/**
 * @description 获取字符串后n位
 * @method strSlice
 * @param str 需要转换的字符串
 * @returns string
 * @author ZhaoJia 2015-10-13 19:28:44
 */
function strSlice(str, n) {
    return String(str).slice(n);
}

/**
 * @description 身份证号码只显示前三位和后四位
 * @method certNoShielded
 * @param
 * @returns string
 * @author gaojian 2016-2-26 10:36:33
 */
function certNoShielded(certNo) {
    if (isDefine(certNo)) {
        return certNo.substring(0, 3) + "***********" + certNo.substring(certNo.length - 4);
    }
}

/**
 * @description 电话号码屏蔽中间五位
 * @method phoneNumberShielded5
 * @param phoneNumber 需要屏蔽的电话号码
 * @returns string
 * @author zhubingbing 2015-10-15 17:51:44
 */
function phoneNumberShielded5(phoneNumber) {
    if (isDefine(phoneNumber)) {
        var mobile = phoneNumber.substr(0, 3);
        var stringdh = "*****";
        var coll = phoneNumber.substr(phoneNumber.length - 3, 3);
        return mobile + stringdh + coll;
    }
}

/**
 * @description 银行卡屏蔽只留后四位
 * @method phoneNumberShielded5
 * @param cardNo 需要屏蔽的电话号码
 * @returns string
 * @author zhubingbing 2015-10-15 17:51:44
 */
function cardNoShielded(cardNo) {
    if (isDefine(cardNo)) {
        var stringkh = "";
        var cardgood = cardNo.substr(cardNo.length - 4, 4);
        return stringkh + cardgood;
    }
}

/**
 * @description 从url中获取参数并返回
 * @method getParaArrFromUrl
 * @param url 地址
 * @param flag 判别是否返回参数"key=value",还是直接返回value (0:key=value; 1:value)
 * @returns string
 * @author ZhaoJia 2015-10-13 19:28:44
 */
function getParaArrFromUrl(strUrl, flag) {
    if (!isDefine(strUrl)) {
        return "";
    }
    if (strUrl.lastIndexOf("?") > 0) {
        var arr = strUrl.split("?");
        var i = arr.length;
        switch(flag) {
        case 0:
            return arr[flag];
        case 1:
            return arr[flag].split("=")[1];
        //得到k=0返回URL？k1返回key=value中的1值
        }
    } else {
        switch(flag) {
        case 0:
            return strUrl;
        case 1:
            return "";
        }
    }
}

/**
 * @description 为元素添加属性
 * @method appendAttr
 */
function appendAttr(obj) {
    var attrItem = "";
    for (key in obj) {
        var obj_key = obj[key] == "" ? "--" : obj[key];
        attrItem += key + '="' + obj_key + '" ';
    }
    return attrItem;
}

/*
 * 处理str  为空时，返回 “--”
 */
function placeHolderStr(orignName) {
    if (isDefine(orignName)) {
        return orignName;
    }

    return "--";
}

//刷新页面数据
function refreshPageData(isToast) {
    ueppscript("root", "indexCon_3", "onOrOff()");
    setLocVal("refreshPageData", "1");
    if (isToast != "false") {
        isToast = "true";
        //为空为true
    }
}

/*
 * 验证基金代码格式
 */
function checkFundCode(fundCode) {
    var reg = /^[0-9]{6}$/;
    if (reg.test(fundCode)) {
        return true;
    }
    return false;
}

/**
 *64加密解密方法
 *卫星添加
 */
var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);

function base64encode(str) {
    var out,
        i,
        len;
    var c1,
        c2,
        c3;

    len = str.length;
    i = 0;
    out = "";
    while (i < len) {
        c1 = str.charCodeAt(i++) & 0xff;
        if (i == len) {
            out += base64EncodeChars.charAt(c1 >> 2);
            out += base64EncodeChars.charAt((c1 & 0x3) << 4);
            out += "==";
            break;
        }
        c2 = str.charCodeAt(i++);
        if (i == len) {
            out += base64EncodeChars.charAt(c1 >> 2);
            out += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
            out += base64EncodeChars.charAt((c2 & 0xF) << 2);
            out += "=";
            break;
        }
        c3 = str.charCodeAt(i++);
        out += base64EncodeChars.charAt(c1 >> 2);
        out += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
        out += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));
        out += base64EncodeChars.charAt(c3 & 0x3F);
    }
    return out;
}

function base64decode(str) {
    var c1,
        c2,
        c3,
        c4;
    var i,
        len,
        out;

    len = str.length;
    i = 0;
    out = "";
    while (i < len) {
        /* c1 */
        do {
            c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
        } while(i < len && c1 == -1);
        if (c1 == -1)
            break;

        /* c2 */
        do {
            c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
        } while(i < len && c2 == -1);
        if (c2 == -1)
            break;

        out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));

        /* c3 */
        do {
            c3 = str.charCodeAt(i++) & 0xff;
            if (c3 == 61)
                return out;
            c3 = base64DecodeChars[c3];
        } while(i < len && c3 == -1);
        if (c3 == -1)
            break;

        out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));

        /* c4 */
        do {
            c4 = str.charCodeAt(i++) & 0xff;
            if (c4 == 61)
                return out;
            c4 = base64DecodeChars[c4];
        } while(i < len && c4 == -1);
        if (c4 == -1)
            break;
        out += String.fromCharCode(((c3 & 0x03) << 6) | c4);
    }
    return out;
}
/**
 * @description 基金类型判断是否可以购买
 * @method buyingState
 * @param fundState 基金状态代码
 * @returns boolean
 * @author ZhaoJia 2015-10-13 19:28:44
 */
function buyingState(fundState) {
    switch(fundState) {
    case "0"://正常
    case "1"://发行
    case "2"://发行成功
    case "6": //停止赎回
    case "7"://权益登记
    case "8"://红利发放
        return true;

    case "3":
    //发行失败
    case "4":
    //停止交易
    case "5":
    //停止申购
    case "9":
    //基金封闭
    case "a":
        //基金终止
        return false;
    }
}
function utf16to8(str) {
    var out,
        i,
        len,
        c;

    out = "";
    len = str.length;
    for ( i = 0; i < len; i++) {
        c = str.charCodeAt(i);
        if ((c >= 0x0001) && (c <= 0x007F)) {
            out += str.charAt(i);
        } else if (c > 0x07FF) {
            out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));
            out += String.fromCharCode(0x80 | ((c >> 6) & 0x3F));
            out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));
        } else {
            out += String.fromCharCode(0xC0 | ((c >> 6) & 0x1F));
            out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));
        }
    }
    return out;
}

function utf8to16(str) {
    var out,
        i,
        len,
        c;
    var char2,
        char3;

    out = "";
    len = str.length;
    i = 0;
    while (i < len) {
        c = str.charCodeAt(i++);
        switch(c >> 4) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
            // 0xxxxxxx
            out += str.charAt(i - 1);
            break;
        case 12:
        case 13:
            // 110x xxxx   10xx xxxx
            char2 = str.charCodeAt(i++);
            out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
            break;
        case 14:
            // 1110 xxxx  10xx xxxx  10xx xxxx
            char2 = str.charCodeAt(i++);
            char3 = str.charCodeAt(i++);
            out += String.fromCharCode(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
            break;
        }
    }

    return out;
}

//---------------------------64加密解密方法结束------------------------------
//序列化form表单中的所有控件
function formToJson(formid) {
    var jsonStr = '{';
    $("#" + formid + " [id^=fld_]").each(function() {
        jsonStr += "\"" + $(this).attr("id").replace("fld_", "") + "\":\"" + $(this).val() + "\",";
    });
    jsonStr = jsonStr.substring(0, jsonStr.length - 1);
    jsonStr += '}';
    if (jsonStr == "}") {
        jsonStr = "";
    }

    return jsonStr;
}

//表单验证
function formValidation(formid) {
    //$('#' + formid).validationEngine();
    $('#' + formid).validationEngine('attach', {
        promptPosition : 'topLeft',
        scroll : false
    });
    return $("#" + formid).validationEngine('validate');
}

//返回个人中心
$("#home").click(function() {
    if (checkLoginStatus()) {
        openNewWindow("myAccount", "../MyAccount/myAccount.html");
    } else {
        openNewWindow("login", "../login.html");
    }
});
//判断是否为登录状态
function checkLoginStatus() {
    //获取本地缓存中的登录状态
    var loginFlag = getLocVal("loginFlag");
    return loginFlag == "S";
}

//检查返回结果是否正确,返回true表示结果正确
function checkResultIsSuccess(data) {
    if (!isDefine(data.status)) {
        var resultData = JSON.parse(data);
        if (resultData.status == "0") {
            //成功返回
            var headResult = resultData.Head;
            if (headResult.resFlag == "S") {
                //返回成功
                return true;
            } else {
                if (headResult.msgCode == "1035" || headResult.msgCode == "1036") {
                    uexWindow.cbConfirm = function(opId, dataType, data) {
                        if (data == 0) {
                            openNewWindow("riskQuestionList", "../riskQuestion/riskQuestionIndex.html");
                        }
                    };
                    uexWindow.confirm('温馨提示', headResult.msgInfo, '确认取消');
                    //返回成功
                }else if (headResult.msgCode == "0102" || headResult.msgCode == 'EGW00014') {
					//0102 直销用户密码错误， EGW00014 代销用户密码错误
					//密码输错次数
					var pwdErrorNum = parseInt(resultData.Body.pwdErrorNum * 1);
					//密码剩余可输入次数
					var pwdRemNum = resultData.Body.pwdRemNum;
					var loginErrorMessage = "请输入正确密码";
					if (pwdRemNum != undefined && pwdRemNum > 0) {
						loginErrorMessage = "您已输错密码" + pwdErrorNum + "次，还剩" + pwdRemNum + "次机会。";
					} else if(pwdRemNum==0) {
						countDownLock();
						//锁定倒计时
						if (totalTime > 0) {
							var restTime = getRestTime();
							loginErrorMessage = "由于连续输错密码次数过多，账号暂被锁定，剩余" + restTime + "分钟";
						}
					}
					commonHint('alert', loginErrorMessage);
					$("#dotOne,#dotTwo,#dotThree,#dotFour,#dotFive,#dotSix,#dotSeven,#dotEight").hide();
				}else if(headResult.msgCode == "MAS0020"){
				    //commonHint('alert', loginErrorMessage);
				    uexWindow.cbConfirm = function(opId, dataType, data) {
                        if (data == 0) {
                            //appcan.window.close();
                            //openNewWindow("register", "register.html");
                        }
                    };
                    uexWindow.confirm('温馨提示',headResult.msgInfo, ['确定']);
				    // appcan.button("#home", "btn-act", function() {
                        // openNewWindow("register", "register.html");
                    // });
				}else {
                    //返回失败
                    commonHint("alert", headResult.msgInfo);
                }
            }
        } else {
            //有错误
            commonHint("alert", resultData.msg);
        }
    } else {
        //有错误
        commonHint("alert", data.message);
    }
    $.removeimage();
    return false;
}

//本地缓存对象，对象以json字符串存，适用对象和数组
function setLocObjectVal(key, value) {
    setLocVal(key, JSON.stringify(value));
}

//取本地缓存对象，把本地json字符串转换为对象，适用对象和数组
function getLocObjectVal(key) {
    var value = getLocVal(key);
    if (isDefine(value)) {
        return JSON.parse(value);
    }
}

/*
 * 若对象未定义返回空
 * @param value 要转换的对象
 */
function undefineToEmptyStr(value) {
    if (value == null || value == "" || value == "undefined" || value == undefined || value == "null" || value == "(null)" || value == 'NULL' || typeof (value) == 'undefined') {
        return "";
    } else {
        return value;
    }
}

/**
 *将日期格式为yyyymm转换为yyyy年mm月
 */
function formatYYYYMMtoCH(dataStr) {
    var dadaCH = dataStr;
    if (isDefine(dataStr) && dataStr.length == 8) {
        dadaCH = dataStr.substring(0, 4) + "年" + dataStr.substring(4, 6) + "月";
    }
    return dadaCH;
}

/**
 * 将格式为hhmmss的时间格式转换为hh:mm:ss格式
 */
function formatHHMMSStoSeparated(timeStr) {
    var timeSeparated = timeStr;
    if (isDefine(timeStr) && timeStr.length == 6) {
        timeSeparated = timeStr.substring(0, 2) + ":" + timeStr.substring(2, 4) + ":" + timeStr.substring(4, 6);
    }
    return timeSeparated;
}

/**
 * 将格式为yyyymm转化为yy-mm-dd
 */
function formatYYYYMMtoSeparated(dataStr) {
    var dadaCH = dataStr;
    if (isDefine(dataStr) && dataStr.length == 8) {
        dadaCH = dataStr.substring(0, 4) + "-" + dataStr.substring(4, 6) + "-" + dataStr.substring(6, 8);
    }
    return dadaCH;
}

/**
 * 将格式为20050803转化为08-03
 */
function formatYYYYMMDDtoMMDD(dataStr) {
    var dadaCH = dataStr;
    if (isDefine(dataStr) && dataStr.length == 8) {
        dadaCH = dataStr.substring(4, 6) + "-" + dataStr.substring(6, 8);
    }
    return dadaCH;
}

//遮罩层方法
// function loadingImg() {
// this.zhezhao = "<div id='blackloaddiv' style='z-index:6666;position:relative;width:100%;height:100%;background:rgba(0,0,0,0.2);top:0em;'></div>";
// this.wai = "<div class='ulev-1 ub-ac' id='loadimgdiv' style='z-index:6667;top:47%;left:47%;position:absolute;width:3em;height:3em;transform-origin:center center;'><img style='height:3em;width:3em;' src='../image/fqbLoading.png' /></div>";
// }

var loadingImgNum = 0;
var loadingImgTime;
//打开遮罩层
// loadingImg.prototype.addImg = function() {
// $("body").append(this.zhezhao);
// $("#blackloaddiv").append(this.wai);
// //num=this.num;
// loadingImgTime = setInterval(function() {
// //console.log(loadingImgNum);
// loadingImgNum += 3;
// $("#loadimgdiv").css("transform", "rotate(" + loadingImgNum + "deg)");
// }, 10);
// };
//
// //关闭遮罩层
// loadingImg.prototype.removeImg = function() {
// //num=0;
// clearInterval(loadingImgTime);
// $("#loadimgdiv").remove();
// $("#blackloaddiv").remove();
// };
//日期格式转换 月-日
function getMM_DD(t) {
    if (isDefine(t)) {
        return t.substring(4, 6) + "-" + t.substring(6, 8);
    } else {
        return "--";
    }
};
//日期格式转换 年-月-日
function getDateFormatting(t) {
    if (isDefine(t)) {
        return t.substring(0, 4) + "-" + t.substring(4, 6) + "-" + t.substring(6, 8);
    }
}
function getNewMMDD(t) {
    if (isDefine(t)) {
        return t.substring(4, 6) + "." + t.substring(6, 8);
    } else {
        return "--";
    }
};
//基金净值
function getPerNetValue(perNetValue) {
    if (isDefine(perNetValue)) {
        var perNet = parseFloat(perNetValue);
        return perNet.toFixed(4);
    } else {
        return "0.0000";
    }
};
//百分比转换
function getPercentage(tage) {
    if (isDefine(tage)) {
        var seasonTage = tage * 100;
        return seasonTage.toFixed(2) + "%";
    } else {
        return "0.00%";
    }
};
function getPercentageFocus(tage) {
    if (isDefine(tage)) {
        var seasonTage = tage * 100;
        return seasonTage.toFixed(4) + "%";
    } else {
        return "0.0000%";
    }
};

//清除本地不需要保留的缓存数据
function clearNeedLocal() {
    var keys = appcan.locStorage.keys();
    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (notNeedClenrLocal.indexOf(key) == -1) {
            appcan.locStorage.remove(key);
        }
    };
}

//判断本地缓存是否存在，如果存在判断当前日期是否大于需要更新日期
function checkLocalIsLimit(localTimeKey, localValueKey) {
    var localValueKeyValue = "";
    var timeKeyVlue = getLocVal(localTimeKey);
    if (isDefine(timeKeyVlue)) {
        //获取对应的更新时间差
        var refreshDays = getLocalKeyNeedRefreshDays(localValueKey);
        if (isDefine(refreshDays)) {
            var diffDays = getDateDiff(getYYYY_MM_DD(new Date()), timeKeyVlue);
            if (diffDays < refreshDays) {
                localValueKeyValue = getLocObjectVal(localValueKey);
            }
        }
    }
    return localValueKeyValue;
}

//获取两个日期相差天数
function getDateDiff(startDate, endDate) {
    var startTime = new Date(Date.parse(startDate.replace(/-/g, "/"))).getTime();
    var endTime = new Date(Date.parse(endDate.replace(/-/g, "/"))).getTime();
    var dates = Math.abs((startTime - endTime)) / (1000 * 60 * 60 * 24);
    return dates;
}

$.extend({
    numtote : 0,
    loadingImgNum : 0,
    loadingImgTime : "",
    zhezhao : "<div id='blackloaddiv' style='z-index:9998;position:fixed;width:100%;height:100%;background:rgba(0,0,0,0.2);top:0em;'></div>",
    wai : "<div class='ulev-1 ub-ac' id='loadimgdiv' style='z-index:9999;top:47%;left:47%;position:absolute;width:3em;height:3em;transform-origin:center center;'><img style='height:3em;width:3em;' src='../image/fqbLoading.png' /></div>",
    addimage : function() {
        //var zhezhao = "<div id='blackloaddiv' style='z-index:6666;position:relative;width:100%;height:100%;background:rgba(0,0,0,0.2);top:0em;'></div>";
        //var wai = "<div class='ulev-1 ub-ac' id='loadimgdiv' style='z-index:6667;top:47%;left:47%;position:absolute;width:3em;height:3em;transform-origin:center center;'><img style='height:3em;width:3em;' src='../image/fqbLoading.png' /></div>";
        $("body").append(this.zhezhao);
        if (this.numtote == 0) {

            $("#blackloaddiv").append(this.wai);
            //num=this.num;
            this.numtote = 1;
        }
        this.loadingImgTime = setInterval(function() {
            //console.log(loadingImgNum);
            this.loadingImgNum += 3;
            $("#loadimgdiv").css("transform", "rotate(" + loadingImgNum + "deg)");
        }, 10);
    },
    removeimage : function() {
        clearInterval(this.loadingImgTime);
        $("#loadimgdiv").remove();
        $("#blackloaddiv").remove();
        this.loadingImgNum = 0;
        this.numtote = 0;
        //this=null;
    }
});

/*
 * 提交后验证手机号码
 */
function validateMobile(value) {
    var reg = /^1\d{10}$/;
    if (reg.test(value)) {
        return true;
    }
    return false;
}

/**
 * @description 密码框位数验证正则
 * @method checkPwd
 * @returns void
 *
 */
function checkPwd(pwd) {
    var reg = /^\d{8}$/;
    return reg.test(pwd);
}

//检查返回结果是否正确,返回true表示结果正确,无弹出框提示
function checkResultIsSuccessWithOutAlert(data) {
    if (!isDefine(data.status)) {
        var resultData = JSON.parse(data);
        if (resultData.status == "0") {
            //成功返回
            var headResult = resultData.Head;
            if (headResult.resFlag == "S") {
                //返回成功
                return true;
            }
        }
    }
    return false;
}

//验证输入的是否为数字,可带小数点
function checkMath(fend) {
    var reg = /^\d+(\.\d+)?$/;
    if (reg.test(fend)) {
        return true;
    } else {
        return false;
    }
}

//只能输入数字
function checkMathNo(fend) {
    var reg = /^[0-9\ ]+$/;
    if (reg.test(fend)) {
        return true;
    } else {
        return false;
    }
}

//验证输入金额是否大于俩位小数
function checkMathTwo(inputId,maxlength) {
	$("#" + inputId + "").attr("onkeypress","return checkKeyCode()");
	if(isDefine(maxlength)){
		$("#" + inputId + "").attr("maxlength", maxlength);
	}else{
		$("#" + inputId + "").attr("maxlength", 16);
	}
    $("#" + inputId + "").bind("input", function() {
        var applyShare = $("#" + inputId + "").val();
        if (isDefine(applyShare)) {
            var re = /^\d+(?:\.\d{0,2})?$/;
            if (!re.test(applyShare)) {
            	$("#" + inputId + "").val(applyShare.substr(0, applyShare.length-1));
            }
        }
    });
}
//非数字或小数点返回false
function checkKeyCode(){
	return /[\d.]/.test(String.fromCharCode(event.keyCode));
}
/*
 * @description 区分性别
 * @method GetSex
 * @param certNo 身份证
 * @returns 男 or 女
 *
 * @author ChenJiaHe 2015-10-14 18:03:03
 */
function GetSex(certNo) {
    if (certNo.length == 15) {
        sex = parseInt(certNo.substr(13)) % 2;
    } else {
        sex = parseInt(certNo.substr(16, 1)) % 2;
    }
    return sex+"";
}

/*
 *从省份证中获取生日日期
 */
function getBirthdayByCertNo(certNo) {
    if (isDefine(certNo)) {
        if (certNo.length == 15) {
            return "19" + certNo.substr(6, 6);
        } else {
            return certNo.substr(6, 8);
        }
    } else {
        return "";
    }
}

//得到当前时间的年月日数字
function getNowWithYYYYMMDD() {
    var d = new Date();
    var y = d.getFullYear();
    var m = d.getMonth() * 1 + 1;
    m = m < 10 ? ('0' + m) : m;
    var day = d.getDate();
    day = day < 10 ? ('0' + day) : day;
    var hour = d.getHours();
    hour = hour < 10 ? ('0' + hour) : hour;
    var minutes = d.getMinutes();
    minutes = minutes < 10 ? ('0' + minutes) : minutes;
    var milliseconds = d.getMilliseconds();
    milliseconds = milliseconds < 10 ? ('0' + milliseconds) : milliseconds;
    return "" + y + m + day + hour + minutes + milliseconds;
}

/*
 *与当天16点进行大小比较，data必须为全数字，否则返回false
 * 当data时间小于当前时间返回true
 * data等于当前时间，若当前超过16点返回true，其他返回false
 */
function compareDateWithNow(data) {
    if (isDefine(data)) {
        //获取当前时间
        var nowTime = getNowWithYYYYMMDD();
        var nowDateStr = nowTime.substring(0, 8);
        //当前日期
        var nowHourStr = nowTime.substring(8, 10);
        //当前小时
        //时间小于当前返回true
        if (new Number(data) <= new Number(nowDateStr)) {
            return true;
        }
    }
    return false;
}

function compareDateWithNowWith16(data) {
    if (isDefine(data)) {
        //获取当前时间
        var nowTime = getNowWithYYYYMMDD();
        var nowDateStr = nowTime.substring(0, 8);
        //当前日期
        var nowHourStr = nowTime.substring(8, 10);
        //当前小时
        //时间小于当前返回true
        if (new Number(data) < new Number(nowDateStr)) {
            return true;
        }
        //时间等于当前且过了16点返回true
        if ((data == nowDateStr) && (new Number(nowHourStr) >= 16)) {
            return true;
        }
    }
    return false;
}

/***
 * 身份证校验
 */
function isCnNewID(cid) {
    var arrExp = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
    //加权因子
    var arrValid = [1, 0, "X", 9, 8, 7, 6, 5, 4, 3, 2];
    //校验码
    var r = /^\d{17}\d|x$/i;
    if (r.test(cid)) {
        var sum = 0,
            idx;
        for (var i = 0; i < cid.length - 1; i++) {
            // 对前17位数字与权值乘积求和
            sum += parseInt(cid.substr(i, 1), 10) * arrExp[i];
        }
        // 计算模（固定算法）
        idx = sum % 11;
        // 检验第18为是否与校验码相等
        return arrValid[idx] == cid.substr(17, 1).toUpperCase();
    } else {
        return false;
    }
}

/***
 *固定否有页面的header
 */
(function() {
    //页面高度
    var hei = $(document).height();
    //header高度
    var hed = $('#header').height();
    if (hed > 0) {
        $("#header").attr("style", "position: fixed;top: 0;z-index: 1000");
        // $("#page_0").attr("style","padding-top:"+hed+"px");
        $("#content").attr("style", "margin-top:" + hed + "px");
    }
})();

/*********************千分位加，***********************/
//每期投资金额千分位展示
function commafy(num){
   num = num+"";
   if(/^.*\..*$/.test(num)){
      var pointIndex =num.lastIndexOf(".");
      var intPart = num.substring(0,pointIndex);
      var pointPart =num.substring(pointIndex+1,num.length);
      intPart = intPart +"";
       var re =/(-?\d+)(\d{3})/
       while(re.test(intPart)){
          intPart =intPart.replace(re,"$1,$2")
       }
      num = intPart+"."+pointPart;
   }else{
      num = num +"";
       var re =/(-?\d+)(\d{3})/
       while(re.test(num)){
          num =num.replace(re,"$1,$2")
       }
   }
    return num;
}

/*********************判断显示份还是显示元***********************/
//判断显示份还是显示元
function getAmtUnit(tradeType) {
    if (tradeType == "快速取现" || tradeType == "富钱包购买" || tradeType == "普通取现" || tradeType == "充值" || tradeType == "申购" || tradeType == "认购"||tradeType == "经典定投" ||tradeType == "目标盈定投") {
        return "元";
    } else {
        return "份";
    }
}

//清除密码控件
function Clear(param) {
    $("#" + param).html("请输入密码");
    $("#" + param).attr("data-ciphertext", "");
    $("#" + param).attr("data-passwordlength", 0);
    $("#" + param).PasswordWidget();
};
function dateFormatPoint (orignStr) {
    if (isDefine(orignStr)) {
        
        var sub = orignStr.substr(0,4);
        var dateMon = orignStr.substr(4,2); // 月份
        var dateDay = orignStr.substr(6,2); // day
        return sub + "-" + dateMon + "-" + dateDay;
    }
    
    return "  -  ";
}
function bankCardNoStr (orignStr) {
    if (isDefine(orignStr)) {
        var ori = orignStr.length-4;
        var sub = orignStr.substr(ori,4);
        return "**" + sub;
    }
    
    return "";
}
//获取url的参数值，不存在返回null
function getUrlParamByKeyName(keyName) {
	var url = window.location.search.substr(1);
	if (!isDefine(url)) {
		return null;
	}
	var paramList = url.split("&");
	for (var i = 0; i < paramList.length; i++) {
		var param = paramList[i];
		if (isDefine(param)) {
			var keyValue = param.split("=");
			if (keyValue.length == 2 && keyValue[0] == keyName) {
				return decodeURI(keyValue[1]);
			}
		}
	}
	return null;
}
function checkIsWeixinVisit(){
	//微信使用，微信访问标识，误删除
	var weixinVisitFlagFromUrl=getUrlParamByKeyName("weixinVisitFlag");
	//微信使用，微信绑定标识，误删除
	var isWeixinBindingFromUrl=getUrlParamByKeyName("isWeixinBinding");
	//合作平台访问标识
	var coopChannelOpen=getUrlParamByKeyName("coopChannelOpen");
	//若合作平台过来，需要设置访问渠道分支号
	if(isDefine(coopChannelOpen)){
		coopChannelOpenParamt=coopChannelOpen;
		if(coopChannelOpen=="nbkj"){
			reqChlBrnNo="0006";
		}else{
			reqChlBrnNo=coopChannelOpen;
		}
	}
	//微信访问参数设置
	var ua = navigator.userAgent.toLocaleLowerCase();
                
    if (ua.match(/MicroMessenger/i) == "micromessenger") {
        if(isDefine(weixinVisitFlagFromUrl)&&isDefine(isWeixinBindingFromUrl)){
            weixinVisitFlag=true;
            if(isWeixinBindingFromUrl=="true"||isWeixinBindingFromUrl==true){
                isWeixinBinding=true;
                weixinUrlInfo="?weixinVisitFlag=true&isWeixinBinding=true";
            }else{
                isWeixinBinding=false;
                weixinUrlInfo="?weixinVisitFlag=true&isWeixinBinding=false";
            }
            //若微信访问，设置微信访问分支号，微信过来时会本地保存微信
            reqChlBrnNo=getLocVal("reqChlBrnNo");
        }else{
            isWeixinBinding=false;
            weixinVisitFlag=false;
            weixinUrlInfo="";
            //清空微信号信息
            if(getLocVal("plateFormID")){
                clearLocVal("plateFormID");
            }
            if(getLocVal("fakeID")){
                clearLocVal("fakeID");
            }
        }
    }else{
        isWeixinBinding = false;
        weixinVisitFlag = false;
        weixinUrlInfo = "";
        //清空微信号信息
        if (getLocVal("plateFormID")) {
            clearLocVal("plateFormID");
        }
        if (getLocVal("fakeID")) {
            clearLocVal("fakeID");
        }
    }  	
}

//锁定的倒计时
function countDownLock() {
    if (totalTime <= 0) {
        resetLockTime();
    } else {
        //第一次开始倒计时或者被重置之后的计时，需要对比timeID和checkTimeID
        if ((timeID == undefined && checkTimeID == undefined) || timeID != checkTimeID) {
            timeID = setInterval(function() {--totalTime;
            }, 1000);
            checkTimeID = timeID;
        }
    }
};

//重置倒计时
function resetLockTime() {
    window.clearInterval(timeID);
    checkTimeID = undefined;
};

//重置倒计时
function getRestTime() {
    var minute = parseInt(totalTime / 60) < 10 ? "0" + parseInt(totalTime / 60) : parseInt(totalTime / 60);
    var second = totalTime % 60 < 10 ? "0" + (totalTime % 60).toString() : totalTime % 60;
    return minute + ":" + second;
}
//离线强制刷新
window.addEventListener('load', function(e) {
  window.applicationCache.addEventListener('updateready', function(e) {
    window.applicationCache.update();
    if (window.applicationCache.status == window.applicationCache.UPDATEREADY) {
      // Browser downloaded a new app cache.
      // Swap it in and reload the page to get the new hotness.
      window.applicationCache.swapCache();
      if (confirm('A new version of this site is available. Load it?')) {
        window.location.reload();
      }
    } else {
      // Manifest didn't changed. Nothing new to server.
    }
  }, false);
}, false);


//获取上一页的url
function referrerUrl(){
    var referrer = document.referrer;
    if(referrer != ""){
        return referrer;
    }else{
        return "";
    }
}
//把8位日期字符串格式化为YYYY.MM.DD,格式不对原样返回
function formateYYYYMMDDWithDot(dateStr){
	if(isDefine(dateStr)&&dateStr.length>=8){
		return dateStr.substring(0, 4) + "." + dateStr.substring(4, 6) + "." + dateStr.substring(6, 8);
	}else{
		return dateStr;
	}
}

//决定广告等外部ifram链接是否需要反向代理
function isRequiredAgent(urlStr){
    if(urlStr.substr(0,5)!="https"&&(appType == 4||appType == 5)){
       //https协议不处理，直接iframe加载，http协议需要处理，反向代理 
       //准生产或生产需要进行反向代理，开发和测试为http，不需要反向代理
       var str=urlStr.split("//")[1];
       str=str.substr(str.indexOf("/"),str.length);
       var agentStr="";
       if(urlStr.indexOf("http://www.fullgoal.com.cn")!=-1){
           agentStr="/agent1";
           urlStr=serverMasUrl.substr(0,serverMasUrl.length-9)+agentStr+str;
       }else if(urlStr.indexOf("http://m.fullgoal.com.cn")!=-1){
           agentStr="/agent2";
           urlStr=serverMasUrl.substr(0,serverMasUrl.length-9)+agentStr+str;
       }else if(urlStr.indexOf("http://wechat.fullgoal.com.cn")!=-1){
           agentStr="/agent3";
           urlStr=serverMasUrl.substr(0,serverMasUrl.length-9)+agentStr+str;
       }       
    }
    return urlStr;
}




/**
 * 在其他窗口中执行指定主窗口中的代码
 * @param String wn  需要执行代码窗口的名称
 * @param String scr 需要执行的代码
 */
function uescript(wn, scr) {
    appcan.window.evaluateScript(wn, scr, '0');
}

/**
 * 在其他窗口中执行指定浮动窗口中的代码
 * @param String wn  需要执行代码浮动窗口所在的主窗口的名称
 * @param String pn  需要执行代码的浮动窗口的名称
 * @param String scr 需要执行的代码
 */
function ueppscript(wn, pn, scr) {
    appcan.window.evaluatePopoverScript(wn, pn, scr);
}

//判断银行卡列表里是否有了,是否需要更新提示：0：需要，1：不需要
function checkNeedUpdate (allList,current) {
    var result = 0;
    for (var i=0;i<allList.length;i++) {
        var listObj = allList[i];
        //招行(从M通联升级到G网银)
        if (listObj.cardNo == current.cardNo && listObj.bankCode == '021' && listObj.capitalMode != 'M') {
            result = 1;
            break;
        }
        
        //建行
        
        //当前选择的银行卡不是B，但是在银行卡列表里有B的就不提示升级
        if (listObj.cardNo == current.cardNo && listObj.bankCode == '005' && listObj.capitalMode == 'B' && current.capitalMode != 'B') {
            result = 1;
            break;
        };
        
        //当有升级过2的银行卡就不提示升级
        if (listObj.cardNo == current.cardNo && listObj.bankCode == '005' && listObj.payMode == '2') {
            result = 1;
            break;
        }
    }
    return result;
}

/*
 * 判断是否属于银联通兴业、浦发、中信及广发卡
 * 011  兴业银行
 * 009  上海浦东发展银行
 * 008  中信银行
 * 017  广发银行
 */
function  isUnionCard(bankInfo) {
    if (!isDefine(bankInfo)) {
        return false;
    }
    var result = false;
    
    if (bankInfo.capitalMode == "3" && (bankInfo.bankCode == "011" || bankInfo.bankCode == "009" || bankInfo.bankCode == "008" || bankInfo.bankCode == "017")){
        result = true;
    }
    
    return result;
}

//字典转字符串
function CommonDicToString (dic) {
    var temp = "";
    for (var key in dic) {
        temp += "&" + key + "=" + dic[key];
    }
    temp = temp.substr(1,temp.length-1);
    
    return temp;
}


//aes加密
function CommomGotoHDPT (param) {
    //微信打开;微信打开 regSource=2，否则regSource=0
    //注册来源（1、订阅号 2、服务号 3、APP）  （必填）
    var userAgent=navigator.userAgent;
    var ua = userAgent.toLocaleLowerCase();
    if(ua.match(/MicroMessenger/i) == "micromessenger"){
        param.regSource = "2";
    } else {
        param.regSource = "1";
    }
    var temp = CommonDicToString(param);
    var EncryptParam = encodeURIComponent(Encrypt(temp));
    
    var tempUrl = "http://116.236.247.85:9060/hdpt/hindex.html?ep=";
    if (appType > 3 ) {
        tempUrl = "https://wechat.fullgoal.com.cn/hdpt/hindex.html?ep=";
    };
     
    window.location.href = tempUrl + EncryptParam;
}

//AES加密
function Encrypt(word){  
    var key = CryptoJS.enc.Utf8.parse(configKeyAction);   
    var srcs = CryptoJS.enc.Utf8.parse(word);  
    var encrypted = CryptoJS.AES.encrypt(srcs, key, {mode:CryptoJS.mode.ECB,padding: CryptoJS.pad.Pkcs7});  
    return encrypted.toString();  
}

//分级基金的风险揭秘书按钮
function CommonFxjms () {
    setLocVal("RiskWarning","YES");
    openNewWindow("RiskWarning", "../RiskWarning/RiskWarning.html");
    //window.location.href="http://www.fullgoal.com.cn/contents/2017/3/23-ba0ecdaa008b443ea6bcd146741a79b7.html";
}

//将浮点数据转换为相应的位数
function toFloat(str, num) {
    if (!isNaN(str) && str !== null && str !== "") {
        return parseFloat(Number(str)).toFixed(num);
    } else {
        return "--";
    }
}